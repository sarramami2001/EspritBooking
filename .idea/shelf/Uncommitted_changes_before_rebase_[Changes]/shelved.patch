Index: src/main/java/tn/esprit/gestionvols/Models/Reservation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/gestionvols/Models/Reservation.java b/src/main/java/tn/esprit/gestionvols/Models/Reservation.java
new file mode 100644
--- /dev/null	(date 1709495901660)
+++ b/src/main/java/tn/esprit/gestionvols/Models/Reservation.java	(date 1709495901660)
@@ -0,0 +1,5 @@
+package tn.esprit.gestionvols.Models;
+
+public class Reservation {
+
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 6accacb6f5cee1485422345481101742d8205e4a)
+++ b/.idea/misc.xml	(date 1709110213243)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="MavenProjectsManager">
Index: src/main/java/tn/esprit/gestionvols/DAO/DAO_Vol.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tn.esprit.gestionvols.DAO;\r\n\r\nimport tn.esprit.gestionvols.Models.Vol;\r\nimport tn.esprit.gestionvols.Utilities.SingletonConnexion;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class DAO_Vol implements InterfaceDAO<Vol>{\r\n    SingletonConnexion dbConnection = SingletonConnexion.getInstance();\r\n    Connection connexion = dbConnection.getConnection();\r\n    @Override\r\n    public void create(Vol obj) {\r\n            try {\r\n                PreparedStatement ps = connexion.prepareStatement(\r\n                        \"insert into (`ref`, `destination` ,`etat` , `prix`,`nombre_places`,`date_vol`,`heure_depart`,`heure_atterissage`) values (?,?,?,?,?,?,?,?)\");\r\n                ps.setString(1, obj.getRef());\r\n                ps.setString(2, obj.getDestination());\r\n                ps.setString(3, obj.getEtat());\r\n                ps.setInt(4, obj.getPrix());\r\n                ps.setInt(5, obj.getNombre_places());\r\n                ps.setDate(6, obj.getDate_vol());\r\n                ps.setDate(7, obj.getHeure_depart());\r\n                ps.setDate(8, obj.getHeure_atterissage());\r\n\r\n                ps.executeUpdate();\r\n                ps.close();\r\n            } catch (SQLException e1) {\r\n                e1.printStackTrace();\r\n            }\r\n\r\n    }\r\n\r\n    @Override\r\n    public Vol getById(int id) {\r\n        Vol vol = new Vol();\r\n        try {\r\n            PreparedStatement ps = connexion.prepareStatement(\"select * from Vol where id=?\");\r\n            ps.setInt(1, id);\r\n            ResultSet rs = ps.executeQuery();\r\n            if (rs.next()) {\r\n                vol.setRef(rs.getString(1));\r\n                vol.setDestination(rs.getString(2));\r\n                vol.setEtat(rs.getString(3));\r\n                vol.setPrix(rs.getInt(4));\r\n                vol.setNombre_places(rs.getInt(5));\r\n                vol.setDate_vol(rs.getDate(6));\r\n                vol.setHeure_depart(rs.getDate(7));\r\n                vol.setHeure_atterissage(rs.getDate(8));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return vol;\r\n    }\r\n\r\n    @Override\r\n    public List<Vol> getAll() {\r\n\r\n        List<Vol> lst = new ArrayList<>();\r\n        try {\r\n            PreparedStatement ps = connexion.prepareStatement(\"select * from Vol\");\r\n            ResultSet rs = ps.executeQuery();\r\n            while (rs.next()) {\r\n                Vol vol = new Vol();\r\n                vol.setRef(rs.getString(1));\r\n                vol.setDestination(rs.getString(2));\r\n                vol.setEtat(rs.getString(3));\r\n                vol.setPrix(rs.getInt(4));\r\n                vol.setNombre_places(rs.getInt(5));\r\n                vol.setDate_vol(rs.getDate(6));\r\n                vol.setHeure_depart(rs.getDate(7));\r\n                vol.setHeure_atterissage(rs.getDate(8));\r\n                lst.add(vol);\r\n            }\r\n        } catch (SQLException e) {\r\n            return null;\r\n        }\r\n        return lst;\r\n\r\n    }\r\n\r\n    @Override\r\n    public void update(Vol obj) {\r\n        try {\r\n            PreparedStatement ps = connexion.prepareStatement(\"UPDATE Vol SET ref=?, destination=? , etat=? , prix=?, nombre_places=? ,date_vol=? , heure_depart=? , heure_atterissage=? WHERE ref=?\");\r\n            ps.setString(1, obj.getRef());\r\n            ps.setString(2, obj.getDestination());\r\n            ps.setString(3, obj.getEtat());\r\n            ps.setInt(4, obj.getPrix());\r\n            ps.setInt(5, obj.getNombre_places());\r\n            ps.setDate(6, obj.getDate_vol());\r\n            ps.setDate(7, obj.getHeure_depart());\r\n            ps.setDate(8, obj.getHeure_atterissage());\r\n            ps.executeUpdate();\r\n} catch (SQLException e) {\r\n        System.out.println(e.getMessage());\r\n        }\r\n\r\n        }\r\n\r\n@Override\r\n    public void delete(int id) {\r\n        try {\r\n            PreparedStatement ps = connexion.prepareStatement(\"delete from Vol where id=?\");\r\n            ps.setInt(1, id);\r\n            ps.executeUpdate();\r\n            ps.close();\r\n        } catch (SQLException e1) {\r\n            e1.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/gestionvols/DAO/DAO_Vol.java b/src/main/java/tn/esprit/gestionvols/DAO/DAO_Vol.java
--- a/src/main/java/tn/esprit/gestionvols/DAO/DAO_Vol.java	(revision 6accacb6f5cee1485422345481101742d8205e4a)
+++ b/src/main/java/tn/esprit/gestionvols/DAO/DAO_Vol.java	(date 1708768208957)
@@ -17,7 +17,7 @@
     public void create(Vol obj) {
             try {
                 PreparedStatement ps = connexion.prepareStatement(
-                        "insert into (`ref`, `destination` ,`etat` , `prix`,`nombre_places`,`date_vol`,`heure_depart`,`heure_atterissage`) values (?,?,?,?,?,?,?,?)");
+                        "insert into vol (`ref`, `destination` ,`etat` , `prix`,`nombre_places`,`date_vol`,`heure_depart`,`heure_atterissage`) values (?,?,?,?,?,?,?,?)");
                 ps.setString(1, obj.getRef());
                 ps.setString(2, obj.getDestination());
                 ps.setString(3, obj.getEtat());
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e37eb55e-d094-46db-b12d-65e3b6dd855e\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Rebase.Settings\">\r\n    <option name=\"NEW_BASE\" value=\"master\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"Use Maven wrapper\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2cbI6mDFE1ZWkMV6mcRM3ejEYyH\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"last_opened_file_path\": \"C:/Users/YOSRA/Documents/EspritBooking\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"modification 1\" />\r\n    <MESSAGE value=\"modification 2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"modification 2\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6accacb6f5cee1485422345481101742d8205e4a)
+++ b/.idea/workspace.xml	(date 1709495918816)
@@ -5,7 +5,12 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e37eb55e-d094-46db-b12d-65e3b6dd855e" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/src/main/java/tn/esprit/gestionvols/Models/Reservation.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tn/esprit/gestionvols/DAO/DAO_Vol.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tn/esprit/gestionvols/DAO/DAO_Vol.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tn/esprit/gestionvols/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tn/esprit/gestionvols/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/tn/esprit/gestionvols/Models/Vol.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/tn/esprit/gestionvols/Models/Vol.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -42,30 +47,61 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "master",
-    "last_opened_file_path": "C:/Users/YOSRA/Documents/EspritBooking",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/tp13/statioSki&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="e37eb55e-d094-46db-b12d-65e3b6dd855e" name="Changes" comment="" />
+      <created>1709110217073</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1709110217073</updated>
+      <workItem from="1709110223823" duration="299000" />
+      <workItem from="1709488793175" duration="5319000" />
+    </task>
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="modification 1" />
     <MESSAGE value="modification 2" />
-    <option name="LAST_COMMIT_MESSAGE" value="modification 2" />
+    <option name="LAST_COMMIT_MESSAGE" value="" />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/main/java/tn/esprit/gestionvols/Models/Vol.java</url>
+          <line>5</line>
+          <option name="timeStamp" value="1" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/tn/esprit/gestionvols/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tn.esprit.gestionvols;\r\nimport tn.esprit.gestionvols.Models.Vol;\r\nimport tn.esprit.gestionvols.Services.service_vol;\r\n\r\n\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Vol vol = new Vol(\"refvol1\",\"Paris\",\"atterri\" ,700,220);\r\n        service_vol s=new service_vol();\r\n        s.create(vol);\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/gestionvols/Main.java b/src/main/java/tn/esprit/gestionvols/Main.java
--- a/src/main/java/tn/esprit/gestionvols/Main.java	(revision 6accacb6f5cee1485422345481101742d8205e4a)
+++ b/src/main/java/tn/esprit/gestionvols/Main.java	(date 1709489811663)
@@ -7,9 +7,7 @@
 public class Main {
 
     public static void main(String[] args) {
-        Vol vol = new Vol("refvol1","Paris","atterri" ,700,220);
         service_vol s=new service_vol();
-        s.create(vol);
 
     }
 }
\ No newline at end of file
Index: src/main/java/tn/esprit/gestionvols/Models/Vol.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tn.esprit.gestionvols.Models;\r\n\r\nimport java.sql.Date;\r\n\r\npublic class Vol {\r\n\r\n        private String ref, destination,etat;\r\n        private int id,prix,nombre_places;\r\n        private Date date_vol;\r\n        private Date heure_depart, heure_atterissage;\r\n        public String getRef() {\r\n            return ref;\r\n        }\r\n        public void setRef(String ref) {\r\n            this.ref = ref;\r\n        }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getDestination() {\r\n            return destination;\r\n        }\r\n\r\n        public void setDestination(String destination) {\r\n            this.destination = destination;\r\n        }\r\n\r\n        public String getEtat() {\r\n            return etat;\r\n        }\r\n\r\n        public void setEtat(String etat) {\r\n            this.etat = etat;\r\n        }\r\n\r\n        public int getPrix() {\r\n            return prix;\r\n        }\r\n\r\n        public void setPrix(int prix) {\r\n            this.prix = prix;\r\n        }\r\n\r\n        public int getNombre_places() {\r\n            return nombre_places;\r\n        }\r\n\r\n        public void setNombre_places(int nombre_places) {\r\n            this.nombre_places = nombre_places;\r\n        }\r\n\r\n        public Date getDate_vol() {\r\n            return date_vol;\r\n        }\r\n\r\n        public void setDate_vol(Date date_vol) {\r\n            this.date_vol = date_vol;\r\n        }\r\n\r\n        public Date getHeure_depart() {\r\n            return heure_depart;\r\n        }\r\n\r\n        public void setHeure_depart(Date heure_depart) {\r\n            this.heure_depart = heure_depart;\r\n        }\r\n\r\n        public Date getHeure_atterissage() {\r\n            return heure_atterissage;\r\n        }\r\n\r\n        public void setHeure_atterissage(Date heure_atterissage) {\r\n            this.heure_atterissage = heure_atterissage;\r\n        }\r\n\r\n        public Vol() {\r\n        }\r\n\r\n        public Vol(String ref, String destination, String etat, int prix, int nombre_places, Date date_vol,\r\n                   Date heure_depart, Date heure_atterissage) {\r\n            this.ref = ref;\r\n            this.destination = destination;\r\n            this.etat = etat;\r\n            this.prix = prix;\r\n            this.nombre_places = nombre_places;\r\n            this.date_vol = date_vol;\r\n            this.heure_depart = heure_depart;\r\n            this.heure_atterissage = heure_atterissage;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"Vol [ref=\" + ref + \", destination=\" + destination + \", etat=\" + etat + \", prix=\" + prix\r\n                    + \", nombre_places=\" + nombre_places + \", date_vol=\" + date_vol + \", heure_depart=\" + heure_depart\r\n                    + \", heure_atterissage=\" + heure_atterissage + \"]\";\r\n        }\r\n\r\n    public Vol(String ref, String destination, String etat, int prix, int nombre_places) {\r\n        this.ref = ref;\r\n        this.destination = destination;\r\n        this.etat = etat;\r\n        this.prix = prix;\r\n        this.nombre_places = nombre_places;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/tn/esprit/gestionvols/Models/Vol.java b/src/main/java/tn/esprit/gestionvols/Models/Vol.java
--- a/src/main/java/tn/esprit/gestionvols/Models/Vol.java	(revision 6accacb6f5cee1485422345481101742d8205e4a)
+++ b/src/main/java/tn/esprit/gestionvols/Models/Vol.java	(date 1709491743788)
@@ -1,108 +1,184 @@
 package tn.esprit.gestionvols.Models;
 
 import java.sql.Date;
+import java.text.SimpleDateFormat;
 
 public class Vol {
 
-        private String ref, destination,etat;
-        private int id,prix,nombre_places;
-        private Date date_vol;
-        private Date heure_depart, heure_atterissage;
-        public String getRef() {
-            return ref;
-        }
-        public void setRef(String ref) {
-            this.ref = ref;
-        }
+    private int id;
+    private String ref;
+    private String destination;
+    private String etat;
+    private int prix;
+    private int nombre_total_places;
+    private int nombre_places_reservées;
+    private int nombre_places_annulées;
+    private Date date_vol;
+    private Date heure_depart;
+    private Date heure_atterissage;
+
+
+    public Vol() {
+    }
+
+
+    public Vol(int id, String ref, String destination, String etat, int prix, int nombre_total_places, int nombre_places_reservées, int nombre_places_annulées, Date date_vol, Date heure_depart, Date heure_atterissage) {
+        this.id = id;
+        this.ref = ref;
+        this.destination = destination;
+        this.etat = etat;
+        this.prix = prix;
+        this.nombre_total_places = nombre_total_places;
+        this.nombre_places_reservées = nombre_places_reservées;
+        this.nombre_places_annulées = nombre_places_annulées;
+        this.date_vol = date_vol;
+        this.heure_depart = heure_depart;
+        this.heure_atterissage = heure_atterissage;
+    }
+
+    @Override
+    public String toString() {
+        return "Vol{" +
+                "id=" + id +
+                ", ref='" + ref + '\'' +
+                ", destination='" + destination + '\'' +
+                ", etat='" + etat + '\'' +
+                ", prix=" + prix +
+                ", nombre_total_places=" + nombre_total_places +
+                ", nombre_places_reservées=" + nombre_places_reservées +
+                ", nombre_places_annulées=" + nombre_places_annulées +
+                ", date_vol=" + date_vol +
+                ", heure_depart=" + heure_depart +
+                ", heure_atterissage=" + heure_atterissage +
+                '}';
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getRef() {
+        return ref;
+    }
+
+    public void setRef(String ref) {
+        this.ref = ref;
+    }
 
-    public int getId() {
-        return id;
-    }
-
     public String getDestination() {
-            return destination;
-        }
+        return destination;
+    }
 
-        public void setDestination(String destination) {
-            this.destination = destination;
-        }
+    public void setDestination(String destination) {
+        this.destination = destination;
+    }
 
-        public String getEtat() {
-            return etat;
-        }
+    public String getEtat() {
+        return etat;
+    }
 
-        public void setEtat(String etat) {
-            this.etat = etat;
-        }
+    public void setEtat(String etat) {
+        this.etat = etat;
+    }
 
-        public int getPrix() {
-            return prix;
-        }
+    public int getPrix() {
+        return prix;
+    }
 
-        public void setPrix(int prix) {
-            this.prix = prix;
-        }
+    public void setPrix(int prix) {
+        this.prix = prix;
+    }
 
-        public int getNombre_places() {
-            return nombre_places;
-        }
-
-        public void setNombre_places(int nombre_places) {
-            this.nombre_places = nombre_places;
-        }
 
-        public Date getDate_vol() {
-            return date_vol;
-        }
+    public Date getDate_vol() {
+        return date_vol;
+    }
 
-        public void setDate_vol(Date date_vol) {
-            this.date_vol = date_vol;
-        }
+    public void setDate_vol(Date date_vol) {
+        this.date_vol = date_vol;
+    }
 
-        public Date getHeure_depart() {
-            return heure_depart;
-        }
+    public Date getHeure_depart() {
+        return heure_depart;
+    }
 
-        public void setHeure_depart(Date heure_depart) {
-            this.heure_depart = heure_depart;
-        }
+    public void setHeure_depart(Date heure_depart) {
+        this.heure_depart = heure_depart;
+    }
 
-        public Date getHeure_atterissage() {
-            return heure_atterissage;
-        }
+    public Date getHeure_atterissage() {
+        return heure_atterissage;
+    }
 
-        public void setHeure_atterissage(Date heure_atterissage) {
-            this.heure_atterissage = heure_atterissage;
-        }
-
-        public Vol() {
-        }
-
-        public Vol(String ref, String destination, String etat, int prix, int nombre_places, Date date_vol,
-                   Date heure_depart, Date heure_atterissage) {
-            this.ref = ref;
-            this.destination = destination;
-            this.etat = etat;
-            this.prix = prix;
-            this.nombre_places = nombre_places;
-            this.date_vol = date_vol;
-            this.heure_depart = heure_depart;
-            this.heure_atterissage = heure_atterissage;
-        }
+    public void setHeure_atterissage(Date heure_atterissage) {
+        this.heure_atterissage = heure_atterissage;
+    }
 
-        @Override
-        public String toString() {
-            return "Vol [ref=" + ref + ", destination=" + destination + ", etat=" + etat + ", prix=" + prix
-                    + ", nombre_places=" + nombre_places + ", date_vol=" + date_vol + ", heure_depart=" + heure_depart
-                    + ", heure_atterissage=" + heure_atterissage + "]";
-        }
+    public int getNombre_total_places() {
+        return nombre_total_places;
+    }
+
+    public void setNombre_total_places(int nombre_total_places) {
+        this.nombre_total_places = nombre_total_places;
+    }
+
+    public int getNombre_places_reservées() {
+        return nombre_places_reservées;
+    }
+
+    public void setNombre_places_reservées(int nombre_places_reservées) {
+        this.nombre_places_reservées = nombre_places_reservées;
+    }
+
+    public int getNombre_places_annulées() {
+        return nombre_places_annulées;
+    }
+
+    public void setNombre_places_annulées(int nombre_places_annulées) {
+        this.nombre_places_annulées = nombre_places_annulées;
+    }
+
+    public String getFormattedDateVol() {
+        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
+        return formatter.format(date_vol); // Format the flight date
+    }
+    public String getFormattedHeureDepart() {
+        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
+        return formatter.format(heure_depart);
+    }
+
 
-    public Vol(String ref, String destination, String etat, int prix, int nombre_places) {
-        this.ref = ref;
-        this.destination = destination;
-        this.etat = etat;
-        this.prix = prix;
-        this.nombre_places = nombre_places;
+    public String getFormattedHeureAtterrissage() {
+        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
+        return formatter.format(heure_atterissage);
     }
-}
+
+    public long getDureeVol() {
+        // Différence en millisecondes entre l'heure d'atterrissage et l'heure de départ
+        long differenceMillisecondes = heure_atterissage.getTime() - heure_depart.getTime();
+
+        // Conversion en heures et minutes
+        long heures = differenceMillisecondes / (60 * 60 * 1000);
+        long minutes = (differenceMillisecondes % (60 * 60 * 1000)) / (60 * 1000);
+
+        // Retourne la durée du vol en heures et minutes
+        return heures * 60 + minutes;
+    }
 
+    public String isVolComplet() {
+        // Calculer le nombre de places disponibles
+        int nombre_places_disponibles = nombre_total_places - nombre_places_reservées + nombre_places_annulées;
+        if (nombre_places_disponibles <= 0) {
+            return "Le vol est complet !";
+        } else {
+            return "Des places sont encore disponibles.";
+        }
+    }
+
+
+
+}
\ No newline at end of file
